;; A Mal interpreter written in Mal itself. Originally written by Joel
;; Martin (kanaka) and modified by Alexander Bagnall (bagnalla).

;; Clojure syntax for defining functions (minus the doc string).
;; (defmacro! defn (fn* [name args body] `(def! ~name (fn* ~args ~body))))

;; Clojure syntax for defining functions.
(defmacro! defn
  (fn* [name & args]
       (cond
         (= (count args) 2)
         (if (sequential? (nth args 0))
           `(def! ~name (fn* ~(nth args 0) ~(nth args 1)))
           (do (println "defn macro: expected list or vector for args")
               (throw "")))

         (= (count args) 3)
         (cond
           (not (string? (nth args 0)))
           (do (println "defn macro: expected string for doc metadata")
               (throw ""))
           (not (sequential? (nth args 1)))
           (do (println "defn macro: expected list or vector for args")
               (throw ""))
           "else"
           `(def! ~name
              (with-meta
                (fn* ~(nth args 1) ~(nth args 2)) ~(nth args 0)))))))

(load-file "progs/env2.mal")
(load-file "progs/core.mal")

;; Read
(defn READ [strng] (read-string strng))

;; Eval
(defn is-pair [x]
  (if (sequential? x)
    (if (> (count x) 0)
      true)))

(defn QUASIQUOTE [ast]
  (cond
    (not (is-pair ast))
    (list 'quote ast)

    (= 'unquote (first ast))
    (nth ast 1)

    (if (is-pair (first ast))
      (if (= 'splice-unquote (first (first ast)))
        true))
    (list 'concat (nth (first ast) 1) (QUASIQUOTE (rest ast)))

    "else"
    (list 'cons (QUASIQUOTE (first ast)) (QUASIQUOTE (rest ast)))))

(defn is-macro-call [ast env]
  (if (list? ast)
    (let* [a0 (first ast)]
      (if (symbol? a0)
        (if (env-find env a0)
          (let* [m (meta (env-get env a0))]
            (if m
              (if (get m "ismacro")
                true))))))))

(defn MACROEXPAND [ast env]
  (if (is-macro-call ast env)
    (let* [mac (env-get env (first ast))]
      (MACROEXPAND (apply mac (rest ast)) env))
    ast))

(defn eval-ast [ast env]
  (do
    (cond
      (symbol? ast) (env-get env ast)
      (list? ast)   (map (fn* [exp] (EVAL exp env)) ast)
      (vector? ast) (apply vector (map (fn* [exp] (EVAL exp env)) ast))
      (map? ast)    (apply hash-map
                           (apply concat
                                  (map (fn* [k] [k (EVAL (get ast k) env)])
                                       (keys ast))))
      "else"        ast)))

(defn LET [env args]
  (if (> (count args) 0)
    (do
      (env-set env (nth args 0) (EVAL (nth args 1) env))
      (LET env (rest (rest args))))))

(defn EVAL [ast env]
  (do
    (if (not (list? ast))
      (eval-ast ast env)

      ;; apply list
      (let* [ast (MACROEXPAND ast env)]
        (if (not (list? ast))
          (eval-ast ast env)

          (let* [a0 (first ast)]
            (cond
              (nil? a0)
              ast

              (= 'def! a0)
              (env-set env (nth ast 1) (EVAL (nth ast 2) env))

              (= 'let* a0)
              (let* [let-env (new-env env)]
                (do
                  (LET let-env (nth ast 1))
                  (EVAL (nth ast 2) let-env)))

              (= 'quote a0)
              (nth ast 1)

              (= 'quasiquote a0)
              (let* [a1 (nth ast 1)]
                (EVAL (QUASIQUOTE a1) env))

              (= 'defmacro! a0)
              (let* [a1 (nth ast 1)
                     a2 (nth ast 2)
                     f (EVAL a2 env)
                     m (or (meta f) {})
                     mac (with-meta f (assoc m "ismacro" true))]
                (env-set env a1 mac))

              (= 'macroexpand a0)
              (let* [a1 (nth ast 1)]
                (MACROEXPAND a1 env))

              (= 'try* a0)
              (if (= 'catch* (nth (nth ast 2) 0))
                (try*
                 (EVAL (nth ast 1) env)
                 (catch* exc
                         (EVAL (nth (nth ast 2) 2)
                               (new-env env
                                        [(nth (nth ast 2)1)]
                                        [exc]))))
                (EVAL (nth ast 1) env))

              (= 'do a0)
              (let* [el (eval-ast (rest ast) env)]
                (nth el (- (count el) 1)))

              (= 'if a0)
              (let* [cond (EVAL (nth ast 1) env)]
                (if (or (= cond nil) (= cond false))
                  (if (> (count ast) 3)
                    (EVAL (nth ast 3) env)
                    nil)
                  (EVAL (nth ast 2) env)))

              (= 'fn* a0)
              (fn* [& args]
                   (EVAL (nth ast 2) (new-env env (nth ast 1) args)))

              "else"
              (let* [el (eval-ast ast env)
                     f (first el)
                     args (rest el)]
                (apply f args)))))))))

;; Print
(defn PRINT [exp] (pr-str exp))

;; REPL
(def! repl-env (new-env))
(defn rep [strng] (PRINT (EVAL (READ strng) repl-env)))

;; core.mal: defined directly using mal
(map (fn* [data] (env-set repl-env (nth data 0) (nth data 1))) core_ns)
(env-set repl-env 'eval (fn* [ast] (EVAL ast repl-env)))
(env-set repl-env '*ARGV* (rest *ARGV*))

;; core.mal: defined using the new language itself 
(rep (str "(def! *host-language* \"" *host-language* "-mal\")"))
(rep "(def! not (fn* [a] (if a false true)))")
(rep "(def! load-file (fn* (f) (eval (read-string (str \"(do \" (slurp f) \")\")))))")
(rep "(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list 'if (first xs) (if (> (count xs) 1) (nth xs 1) (throw \"odd number of forms to cond\")) (cons 'cond (rest (rest xs)))))))")
(rep "(def! *gensym-counter* (atom 0))")
(rep "(def! gensym (fn* [] (symbol (str \"G__\" (swap! *gensym-counter* (fn* [x] (+ 1 x)))))))")
(rep "(defmacro! or (fn* (& xs) (if (empty? xs) nil (if (= 1 (count xs)) (first xs) (let* (condvar (gensym)) `(let* (~condvar ~(first xs)) (if ~condvar ~condvar (or ~@(rest xs)))))))))")

;; REPL loop
(defn repl-loop []
  (let* [line (readline "mal-user> ")]
    (if line
      (do
        (if (not (= "" line))
          (try*
           (println (rep line))
           (catch* exc
                   (println "Uncaught exception:" exc))))
        (repl-loop)))))

(defn -main [& args] 
  (if (> (count args) 0)
    (rep (str "(load-file \"" (first args) "\")"))
    (do
      (rep "(println (str \"Mal [\" *host-language* \"]\"))")
      (repl-loop))))

;; Run the interpreter
(apply -main *ARGV*)
